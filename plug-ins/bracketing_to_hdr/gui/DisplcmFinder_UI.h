/*
 * DisplcmFinder_UI.h  --  Part of the CinePaint plug-in "Bracketing_to_HDR"
 *
 * Copyright (c) 2005-2006  Hartmut Sbosny  <hartmut.sbosny@gmx.de>
 *
 * LICENSE:
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
// my comment
// generated by Fast Light User Interface Designer (fluid) version 1.0108

#ifndef DisplcmFinder_UI_h
#define DisplcmFinder_UI_h
#include <FL/Fl.H>
#include <FL/Fl_Int_Input.H>
#include <FL/Fl_Float_Input.H>
#include "buttons.hpp" // ImageNumberChoice
#include "../br_core/DisplcmFinderCorrel.hpp"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Choice.H>

class DisplcmFinder_UI {
public:
  DisplcmFinder_UI();
private:
  Fl_Double_Window *window_;
  Fl_Group *grp_input_;
  Fl_Int_Input *input_M_start_;
  void cb_input_M_start__i(Fl_Int_Input*, void*);
  static void cb_input_M_start_(Fl_Int_Input*, void*);
  Fl_Int_Input *input_N_start_;
  void cb_input_N_start__i(Fl_Int_Input*, void*);
  static void cb_input_N_start_(Fl_Int_Input*, void*);
  Fl_Int_Input *input_max_num_;
  void cb_input_max_num__i(Fl_Int_Input*, void*);
  static void cb_input_max_num_(Fl_Int_Input*, void*);
  Fl_Int_Input *input_subtr_;
  void cb_input_subtr__i(Fl_Int_Input*, void*);
  static void cb_input_subtr_(Fl_Int_Input*, void*);
  Fl_Int_Input *input_add_;
  void cb_input_add__i(Fl_Int_Input*, void*);
  static void cb_input_add_(Fl_Int_Input*, void*);
  Fl_Float_Input *input_min_rho_;
  void cb_input_min_rho__i(Fl_Float_Input*, void*);
  static void cb_input_min_rho_(Fl_Float_Input*, void*);
  Fl_Button *bttn_default_;
  void cb_bttn_default__i(Fl_Button*, void*);
  static void cb_bttn_default_(Fl_Button*, void*);
  Fl_Choice *choice_verbose_;
  void cb_choice_verbose__i(Fl_Choice*, void*);
  static void cb_choice_verbose_(Fl_Choice*, void*);
  static Fl_Menu_Item menu_choice_verbose_[];
  ImageNumberChoice *choice_imgA_;
  void cb_choice_imgA__i(ImageNumberChoice*, void*);
  static void cb_choice_imgA_(ImageNumberChoice*, void*);
  ImageNumberChoice *choice_imgB_;
  void cb_choice_imgB__i(ImageNumberChoice*, void*);
  static void cb_choice_imgB_(ImageNumberChoice*, void*);
  void cb_Single_i(Fl_Button*, void*);
  static void cb_Single(Fl_Button*, void*);
  void cb_Run_i(Fl_Button*, void*);
  static void cb_Run(Fl_Button*, void*);
  void cb_Single1_i(Fl_Button*, void*);
  static void cb_Single1(Fl_Button*, void*);
public:
  Fl_Window* window();
  void getValuesFromParams(const DisplcmFinderCorrel::Params &); 
  void putValuesToParams(); 
  void default_values(); 
  void run_single(); 
};
#endif
